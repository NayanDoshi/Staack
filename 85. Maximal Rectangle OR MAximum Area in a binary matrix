// HAve to optimized this code ...
//https://leetcode.com/problems/maximal-rectangle/


// After seeing aditya verma video


// Step 1: Create histogram for each row and
// Step 2 : Find max area for each histogram ...
// For each histogram
// step 1: Find NSL
// step 2: Find NSR
// step 3: Find Width=NSR-NSL-1
// step 4: Find Area=width*height

class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        
        vector<int>v;
        
        for(int i=0;i<matrix[0].size();i++)
        {
            v.push_back(matrix[0][i]-'0');
        }
        
        int area=INT_MIN;
        
        area=max(area,MAH(v));
        
        for(int i=1;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[i].size();j++)
            {
                if(matrix[i][j]=='0') v[j]=0;
                else
                {
                    v[j]++;
                }
            }
            area=max(area,MAH(v));
        }
        
        return area;
        
    }
    
   
    //******************************************************//
    
    
    int MAH(vector<int>& heights) {
        
        vector<int>NSL;
        stack<int>s;
        int pseudoIdx=-1;
        
        for(int i=0;i<heights.size();i++)
        {
            if(s.empty()) NSL.push_back(pseudoIdx);
            else
            {
                while(!s.empty() && heights[s.top()]>=heights[i]) s.pop();
                
                if(s.empty()) NSL.push_back(pseudoIdx);
                else 
                {
                    NSL.push_back(s.top());
                }
            }
            s.push(i);
        }
        
        while(!s.empty()) s.pop();
        vector<int>NSR;
        pseudoIdx=heights.size();
        for(int i=heights.size()-1;i>=0;i--)
        {
            if(s.empty()) NSR.push_back(pseudoIdx);
            else
            {
                while(!s.empty() && heights[s.top()]>=heights[i]) s.pop();
                
                if(s.empty()) NSR.push_back(pseudoIdx);
                else 
                {
                    NSR.push_back(s.top());
                }
            }
            s.push(i);
        }
        
        reverse(NSR.begin(),NSR.end());
        
        int n=heights.size();
        vector<int>width;
        
        for(int i=0;i<heights.size();i++)
        {
           width.push_back(NSR[i]-NSL[i]-1);
            // cout<<NSR[i]<<" ";
        }
        int area=0;
        for(int i=0;i<heights.size();i++)
        {
            area=max(area,heights[i]*width[i]);
        }
        
        return area;
    }
    
};
